{
  "errors": [],
  "paths": {
    "_comment": "<add --verbose for a list of skipped paths>",
    "scanned": [
      "targets/equivalence/open_redirect.py"
    ]
  },
  "results": [
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 40,
        "line": 14,
        "offset": 344
      },
      "extra": {
        "fingerprint": "069c470f07d55aaf72107f8716fe8c8e",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 36,
        "line": 19,
        "offset": 430
      },
      "extra": {
        "fingerprint": "3180f164d49523f9a5eeffe8d9e58d50",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "1beea369265dde7d175d6319f1559c4f",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "3d6acba1bdadd51ccd7442de28ce0d47",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "1f92dd572c9b85db49e7be21a32462a6",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "74087a8e460320ffe5bf87aff4297fe2",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "8c3ee7e2dba092368f1afc3b7b0bae7f",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "f61399fb2bc3db660e12959303f48c5d",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "63b5cad6dea69594dbb291b00fb2be82",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "d657763ef966243028de4e8cfdcc227d",
        "is_ignored": false,
        "lines": "from django.http import HttpResponse\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 40,
        "line": 14,
        "offset": 344
      },
      "extra": {
        "fingerprint": "977439eaca2b23d2ac431adf0065207e",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 36,
        "line": 19,
        "offset": 430
      },
      "extra": {
        "fingerprint": "bcc4db3413340c0c0b5ff6913c512d81",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "37515ad44e9a43acf02ddb6831d9ea03",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "ac39047b71a1f100556772eedd86e53d",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "d9a5a874eb4a4c068772bc25c28ec85c",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "b75a5bbebbf3c1b1770f8271daeb6e68",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "68f3ff93c355b7aece7bbffd0371512d",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "f473e38068090d6d4cf27b79433638ed",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "62ceb722c21b0b47150e77ee04d03418",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "9deab5e323164b8ad692c9171b28e0e9",
        "is_ignored": false,
        "lines": "from django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 37
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 40,
        "line": 14,
        "offset": 344
      },
      "extra": {
        "fingerprint": "1602662160aceeb42262cf4c9b5390aa",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 36,
        "line": 19,
        "offset": 430
      },
      "extra": {
        "fingerprint": "f6cdebf1f681bdc896817f3db4203348",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "acc1c2ebcc759ae7168b2e525f13df93",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "b4f3a7a98c246fa2aaa7a8f604efba71",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "59eeffe788c0b92577378a1d3e6a2a82",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "2bb9e862e40625a5d12aa04c5ad8dc36",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "a73fc79b51650ccd47b34eb0d24554b1",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "8b981591473cdcd3f56dcb9b4b6c2c0d",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "a78e72038ac5e0e46954bb07d4f01bd3",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "6bffff65bb9466d4e1ffa3dc3cd6aa58",
        "is_ignored": false,
        "lines": "from django.shortcuts import redirect\nfrom django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 3,
        "offset": 82
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 40,
        "line": 14,
        "offset": 344
      },
      "extra": {
        "fingerprint": "62a1ce5fd0ef6e1ba970a2a4daea9ede",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 36,
        "line": 19,
        "offset": 430
      },
      "extra": {
        "fingerprint": "77e867b16ca21c572885259a5a4e03e7",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "4ae63bc785e7da12b04b0ddfadadb444",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "dfbc76fad4b978e9f0bc01657c42c9e3",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "3f7f907409e50d20d60eb8b214900684",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "33f600c5b741d61e4ddc2d1463eb20b2",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "5c71d88e97c562832455f7df76ac3b8d",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "6d94517f790611a58f68436714574f49",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "d1fd1b6f0d2dafddc62742900b9d3136",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "51221999f4fb47efb0c25aaa7ae85b72",
        "is_ignored": false,
        "lines": "from django.utils.http import is_safe_url\n\n\ndef arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 4,
        "offset": 120
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 40,
        "line": 14,
        "offset": 344
      },
      "extra": {
        "fingerprint": "74f694d30317ff6da3527ac119a76719",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 36,
        "line": 19,
        "offset": 430
      },
      "extra": {
        "fingerprint": "0c97f5219115bd8627969f22fc8f6e84",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "06788a80390b51da0013ab02a61fa04f",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "ae13186103880aa1248d1cfd018bb55a",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "4c9ac9601b9aed38ab4d0921fa948b79",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "6ef7061a87508a4d247f81bb6b3702cc",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "7ea361eabbeb0c4ae78a04d43c25c2dc",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "8125c17cc74afd83d8feb4798144f8f1",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "8442ff3b59d438694072d140378451fe",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "c4aab33ba8c2ce58d2d36556f215f21b",
        "is_ignored": false,
        "lines": "def arg(request):\n    # ruleid: open-redirect\n    return redirect(request.POST.get(\"next\"))\n\n\ndef argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.POST.get(\"next\"))",
            "end": {
              "col": 46,
              "line": 9,
              "offset": 255
            },
            "start": {
              "col": 12,
              "line": 9,
              "offset": 221
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 7,
        "offset": 164
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 36,
        "line": 19,
        "offset": 430
      },
      "extra": {
        "fingerprint": "ea15a764008c389a5252576d08d34a78",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "f23552b6565e0c362bab91c8e5944341",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "27735adeb47e987c38cf72485ef1d2dd",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "1186e5f02a2d619415147955cb904414",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "69962e257249289a84cc6b8e2e16b23d",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "a511d588e58dbf6b1fe2022485f99ef8",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "b1d1a7cf986a0c6470ffd0df40a1383c",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "47326d49cd5a07714930a50a6686f69d",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "2f81cb2b049f079e883b4b840ecb3d3d",
        "is_ignored": false,
        "lines": "def argh(request):\n    # ruleid: open-redirect\n    return redirect(request.get_host())\n\n\ndef arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.get_host())",
            "end": {
              "col": 40,
              "line": 14,
              "offset": 344
            },
            "start": {
              "col": 12,
              "line": 14,
              "offset": 316
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 12,
        "offset": 258
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "1ec7ec3312d340266fcc781fe5ca72e5",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "6e35d489e54921299ff866cbfe6ecc43",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "af4a226856ee08e8888c7e133ff3aaea",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "89d9c50177f21f5c92862de6b9ef7a54",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "b05194a3f5b4791af45c1450b98e84bf",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "727e9ff632bfff0559af5c4a9eb1c371",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "9a97ba2110312ca4f88afdabdc714e99",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "5351e934e5ea6023baaa9c46e97e07d0",
        "is_ignored": false,
        "lines": "def arghh(request):\n    # ruleid: open-redirect\n    return redirect(request.method)\n\n\ndef argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "redirect(request.method)",
            "end": {
              "col": 36,
              "line": 19,
              "offset": 430
            },
            "start": {
              "col": 12,
              "line": 19,
              "offset": 406
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 17,
        "offset": 347
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "161a74dcd71042af6d25ea563ed7b75e",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "fd489e83641a7b45475ac2f2d39c0c13",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "cd2a9a60c1e078a62a269d3bfda44022",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "3decc7e2db37ec975b726346a46b36f3",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "93add98f735a3091899bbe5b7b6beed1",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "1d78e9cb2b419817b8bf4ed39a94d4bc",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "1d8b6070a5c790af080b875c9fd0a794",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "7df76d28687def4294384b03aec251a3",
        "is_ignored": false,
        "lines": "def argh2(request):\n    # ruleid: open-redirect\n    url = request.get_host()\n    print(\"something\")\n    return redirect(url)\n\n\ndef unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 22,
        "offset": 433
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 23,
        "line": 25,
        "offset": 532
      },
      "extra": {
        "fingerprint": "4b7b8ec9d1d8164c481c47499e097183",
        "is_ignored": false,
        "lines": "    url = request.get_host()\n    print(\"something\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 24,
        "offset": 485
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "c0241e39da8dbbc30b91673494a948f2",
        "is_ignored": false,
        "lines": "    url = request.get_host()\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.get_host()",
            "end": {
              "col": 29,
              "line": 24,
              "offset": 509
            },
            "start": {
              "col": 5,
              "line": 24,
              "offset": 485
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 24,
        "offset": 485
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 26,
        "offset": 557
      },
      "extra": {
        "fingerprint": "ae51f975d255c1680546d8e91fcf8ba9",
        "is_ignored": false,
        "lines": "    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 25,
              "offset": 532
            },
            "start": {
              "col": 5,
              "line": 25,
              "offset": 514
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 26,
              "offset": 557
            },
            "start": {
              "col": 12,
              "line": 26,
              "offset": 544
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 25,
        "offset": 514
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "b0ba1e45e9ca29442828fab166445b83",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "67b8650a0eda6da4d991622b54055da3",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "98eaa0ef836751936ff3b800d8272367",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "9194b280a6ce0485bfdd65cfda0ceb30",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "a2c4afcdf9b5c504e1ceaf908233c6b7",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "b8cee3132fa13a77e3df122df3810da6",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "838936284a839aa0f9233e860add78fe",
        "is_ignored": false,
        "lines": "def unsafe(request):\n    # ruleid: open-redirect\n    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)\n\n\ndef safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 29,
        "offset": 560
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 23,
        "line": 32,
        "offset": 673
      },
      "extra": {
        "fingerprint": "ca6fef9d9849776590944bd4a75ca66e",
        "is_ignored": false,
        "lines": "    url = request.headers.get(\"referrer\")\n    print(\"something\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 31,
        "offset": 613
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "358a82068ad5bcee3f88ec02ec833b47",
        "is_ignored": false,
        "lines": "    url = request.headers.get(\"referrer\")\n    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.headers.get(\"referrer\")",
            "end": {
              "col": 42,
              "line": 31,
              "offset": 650
            },
            "start": {
              "col": 5,
              "line": 31,
              "offset": 613
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 31,
        "offset": 613
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 33,
        "offset": 698
      },
      "extra": {
        "fingerprint": "f78789621eca8faa75187660d29a7890",
        "is_ignored": false,
        "lines": "    print(\"something\")\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "print(\"something\")",
            "end": {
              "col": 23,
              "line": 32,
              "offset": 673
            },
            "start": {
              "col": 5,
              "line": 32,
              "offset": 655
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 33,
              "offset": 698
            },
            "start": {
              "col": 12,
              "line": 33,
              "offset": 685
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 32,
        "offset": 655
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "33146356b565b0c74207eb4f72a453bc",
        "is_ignored": false,
        "lines": "def safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 36,
        "offset": 701
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 54,
        "line": 44,
        "offset": 867
      },
      "extra": {
        "fingerprint": "a3eb51d1d01e2b09f7ddc7692eca94eb",
        "is_ignored": false,
        "lines": "def safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 36,
        "offset": 701
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "8365e779679578637d796278c40b5326",
        "is_ignored": false,
        "lines": "def safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 36,
        "offset": 701
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "42768201890e0580c25ea8296e9a395f",
        "is_ignored": false,
        "lines": "def safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 36,
        "offset": 701
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "407e35566b411e71a30b47d73bb6e343",
        "is_ignored": false,
        "lines": "def safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 36,
        "offset": 701
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "84ce7480bee3b17514d2740b30250404",
        "is_ignored": false,
        "lines": "def safe(request):\n    # ok\n    url = \"https://lmnop.qrs\"\n    return redirect(url)\n\n\ndef fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 36,
        "offset": 701
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 25,
        "line": 39,
        "offset": 783
      },
      "extra": {
        "fingerprint": "9e3dcf42a616b12386f969ba5d1d27a4",
        "is_ignored": false,
        "lines": "    url = \"https://lmnop.qrs\"\n    return redirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=\"https://lmnop.qrs\"",
            "end": {
              "col": 30,
              "line": 38,
              "offset": 758
            },
            "start": {
              "col": 5,
              "line": 38,
              "offset": 733
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "redirect(url)",
            "end": {
              "col": 25,
              "line": 39,
              "offset": 783
            },
            "start": {
              "col": 12,
              "line": 39,
              "offset": 770
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 38,
        "offset": 733
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "5ed9fa08b50038b970a3afcf5abf5243",
        "is_ignored": false,
        "lines": "def fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "HttpResponseRedirect(\"https://google.com\")",
            "end": {
              "col": 54,
              "line": 44,
              "offset": 867
            },
            "start": {
              "col": 12,
              "line": 44,
              "offset": 825
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 42,
        "offset": 786
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "6e09f5cfad0990275436a9f38aaa77a1",
        "is_ignored": false,
        "lines": "def fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "HttpResponseRedirect(\"https://google.com\")",
            "end": {
              "col": 54,
              "line": 44,
              "offset": 867
            },
            "start": {
              "col": 12,
              "line": 44,
              "offset": 825
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 42,
        "offset": 786
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "a3e521c80f1caaa1717227bfe631c5e9",
        "is_ignored": false,
        "lines": "def fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "HttpResponseRedirect(\"https://google.com\")",
            "end": {
              "col": 54,
              "line": 44,
              "offset": 867
            },
            "start": {
              "col": 12,
              "line": 44,
              "offset": 825
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 42,
        "offset": 786
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "5b9f79622834dd2acb846ad476867469",
        "is_ignored": false,
        "lines": "def fine(request):\n    # ok\n    return HttpResponseRedirect(\"https://google.com\")\n\n\ndef unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "HttpResponseRedirect(\"https://google.com\")",
            "end": {
              "col": 54,
              "line": 44,
              "offset": 867
            },
            "start": {
              "col": 12,
              "line": 44,
              "offset": 825
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 42,
        "offset": 786
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "121ec5b7e5a3833214ee69054a4f7e4c",
        "is_ignored": false,
        "lines": "def unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "HttpResponseRedirect(url)",
            "end": {
              "col": 37,
              "line": 50,
              "offset": 990
            },
            "start": {
              "col": 12,
              "line": 50,
              "offset": 965
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 47,
        "offset": 870
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 57,
        "line": 55,
        "offset": 1078
      },
      "extra": {
        "fingerprint": "49e1795aba44c02d3bffd3f23748e3a8",
        "is_ignored": false,
        "lines": "def unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "HttpResponseRedirect(url)",
            "end": {
              "col": 37,
              "line": 50,
              "offset": 990
            },
            "start": {
              "col": 12,
              "line": 50,
              "offset": 965
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 47,
        "offset": 870
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "6803ef43b55d142523258a219f708d30",
        "is_ignored": false,
        "lines": "def unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "HttpResponseRedirect(url)",
            "end": {
              "col": 37,
              "line": 50,
              "offset": 990
            },
            "start": {
              "col": 12,
              "line": 50,
              "offset": 965
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 47,
        "offset": 870
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "de62e6758aa1937c3ca7c7a216c5f317",
        "is_ignored": false,
        "lines": "def unsafe2(request):\n    # ruleid: open-redirect\n    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)\n\n\ndef legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "HttpResponseRedirect(url)",
            "end": {
              "col": 37,
              "line": 50,
              "offset": 990
            },
            "start": {
              "col": 12,
              "line": 50,
              "offset": 965
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 47,
        "offset": 870
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 37,
        "line": 50,
        "offset": 990
      },
      "extra": {
        "fingerprint": "e501576c92dca271edae0a32b03720b7",
        "is_ignored": false,
        "lines": "    url = request.POST.get(\"url\")\n    return HttpResponseRedirect(url)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "url=request.POST.get(\"url\")",
            "end": {
              "col": 34,
              "line": 49,
              "offset": 953
            },
            "start": {
              "col": 5,
              "line": 49,
              "offset": 924
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "HttpResponseRedirect(url)",
            "end": {
              "col": 37,
              "line": 50,
              "offset": 990
            },
            "start": {
              "col": 12,
              "line": 50,
              "offset": 965
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 49,
        "offset": 924
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "d13bcdf1bf73f8cabcbd0c8c386ebd0f",
        "is_ignored": false,
        "lines": "def legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "HttpResponseRedirect(request.get_full_path())",
            "end": {
              "col": 57,
              "line": 55,
              "offset": 1078
            },
            "start": {
              "col": 12,
              "line": 55,
              "offset": 1033
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 53,
        "offset": 993
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "c89ce9f9b9cfc5877809c53213b6999e",
        "is_ignored": false,
        "lines": "def legit(request):\n    # ok\n    return HttpResponseRedirect(request.get_full_path())\n\n\ndef url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "HttpResponseRedirect(request.get_full_path())",
            "end": {
              "col": 57,
              "line": 55,
              "offset": 1078
            },
            "start": {
              "col": 12,
              "line": 55,
              "offset": 1033
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 53,
        "offset": 993
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "5efb48188cb39f06887216590b012f78",
        "is_ignored": false,
        "lines": "def url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 58,
        "offset": 1081
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "53951eba8f50cd17339e937b8244bc85",
        "is_ignored": false,
        "lines": "def url_validation(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response\n\n\ndef url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 58,
        "offset": 1081
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 24,
        "line": 64,
        "offset": 1321
      },
      "extra": {
        "fingerprint": "bb6e7f60fb7dbce472bc5ae4da6101b4",
        "is_ignored": false,
        "lines": "    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 60,
        "offset": 1123
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 80,
        "line": 65,
        "offset": 1401
      },
      "extra": {
        "fingerprint": "80df170f6a1078f2e469c60f6a9903ac",
        "is_ignored": false,
        "lines": "    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 60,
        "offset": 1123
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "16c581d234b914852d24c0be6e4b87f4",
        "is_ignored": false,
        "lines": "    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 60,
              "offset": 1179
            },
            "start": {
              "col": 5,
              "line": 60,
              "offset": 1123
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 60,
        "offset": 1123
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 80,
        "line": 65,
        "offset": 1401
      },
      "extra": {
        "fingerprint": "8319da488caec853a5701f26da0ea088",
        "is_ignored": false,
        "lines": "    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "response=HttpResponseRedirect(next)next HttpResponse(status 204)",
            "end": {
              "col": 80,
              "line": 65,
              "offset": 1401
            },
            "start": {
              "col": 5,
              "line": 65,
              "offset": 1326
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 61,
        "offset": 1184
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "4f4f07ff692521f62daeed2e5c6f48de",
        "is_ignored": false,
        "lines": "    if (next or not request.is_ajax()) and not is_safe_url(\n        url=next, allowed_hosts=request.get_host()\n    ):\n        next = \"/index\"\n    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next or not request.is_ajax()and not is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 6,
              "line": 63,
              "offset": 1296
            },
            "start": {
              "col": 9,
              "line": 61,
              "offset": 1188
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "response=HttpResponseRedirect(next)next HttpResponse(status 204)",
            "end": {
              "col": 80,
              "line": 65,
              "offset": 1401
            },
            "start": {
              "col": 5,
              "line": 65,
              "offset": 1326
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 61,
        "offset": 1184
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 66,
        "offset": 1421
      },
      "extra": {
        "fingerprint": "aeead3d44f90b229f0774d5fff9e6871",
        "is_ignored": false,
        "lines": "    response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "response=HttpResponseRedirect(next)next HttpResponse(status 204)",
            "end": {
              "col": 80,
              "line": 65,
              "offset": 1401
            },
            "start": {
              "col": 5,
              "line": 65,
              "offset": 1326
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "response",
            "end": {
              "col": 20,
              "line": 66,
              "offset": 1421
            },
            "start": {
              "col": 12,
              "line": 66,
              "offset": 1413
            },
            "unique_id": {
              "sid": 20,
              "type": "id"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 65,
        "offset": 1326
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "5619912fd1e2fd83d0676fe10bc158ed",
        "is_ignored": false,
        "lines": "def url_validation2(request):\n    # ok\n    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 71,
              "offset": 1523
            },
            "start": {
              "col": 5,
              "line": 71,
              "offset": 1467
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "ok=is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 65,
              "line": 72,
              "offset": 1588
            },
            "start": {
              "col": 5,
              "line": 72,
              "offset": 1528
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 1,
        "line": 69,
        "offset": 1424
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 65,
        "line": 72,
        "offset": 1588
      },
      "extra": {
        "fingerprint": "64ec7c98f36e3e6080c65a9e2ba2446c",
        "is_ignored": false,
        "lines": "    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 71,
              "offset": 1523
            },
            "start": {
              "col": 5,
              "line": 71,
              "offset": 1467
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "ok=is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 65,
              "line": 72,
              "offset": 1588
            },
            "start": {
              "col": 5,
              "line": 72,
              "offset": 1528
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 71,
        "offset": 1467
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 49,
        "line": 76,
        "offset": 1742
      },
      "extra": {
        "fingerprint": "81913404907eefb3ae3214729bd71667",
        "is_ignored": false,
        "lines": "    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 71,
              "offset": 1523
            },
            "start": {
              "col": 5,
              "line": 71,
              "offset": 1467
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "ok=is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 65,
              "line": 72,
              "offset": 1588
            },
            "start": {
              "col": 5,
              "line": 72,
              "offset": 1528
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 71,
        "offset": 1467
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "28d386b4652acb6b22c1d0b259f6c13e",
        "is_ignored": false,
        "lines": "    next = request.POST.get(\"next\", request.GET.get(\"next\"))\n    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "next=request.POST.get(\"next\"request.GET.get(\"next\"))",
            "end": {
              "col": 61,
              "line": 71,
              "offset": 1523
            },
            "start": {
              "col": 5,
              "line": 71,
              "offset": 1467
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "ok=is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 65,
              "line": 72,
              "offset": 1588
            },
            "start": {
              "col": 5,
              "line": 72,
              "offset": 1528
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 71,
        "offset": 1467
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 49,
        "line": 76,
        "offset": 1742
      },
      "extra": {
        "fingerprint": "372cbbe5428d3ec39ad0a19fc20adc68",
        "is_ignored": false,
        "lines": "    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "ok=is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 65,
              "line": 72,
              "offset": 1588
            },
            "start": {
              "col": 5,
              "line": 72,
              "offset": 1528
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "ok",
            "end": {
              "col": 10,
              "line": 73,
              "offset": 1598
            },
            "start": {
              "col": 8,
              "line": 73,
              "offset": 1596
            },
            "unique_id": {
              "sid": 23,
              "type": "id"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 72,
        "offset": 1528
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "0526ef3cdec18972f2f071568b664756",
        "is_ignored": false,
        "lines": "    ok = is_safe_url(url=next, allowed_hosts=request.get_host())\n    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "ok=is_safe_url(url next allowed_hosts request.get_host())",
            "end": {
              "col": 65,
              "line": 72,
              "offset": 1588
            },
            "start": {
              "col": 5,
              "line": 72,
              "offset": 1528
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          },
          "$B": {
            "abstract_content": "ok",
            "end": {
              "col": 10,
              "line": 73,
              "offset": 1598
            },
            "start": {
              "col": 8,
              "line": 73,
              "offset": 1596
            },
            "unique_id": {
              "sid": 23,
              "type": "id"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 72,
        "offset": 1528
      }
    },
    {
      "check_id": "rules.forcetimeout",
      "end": {
        "col": 20,
        "line": 77,
        "offset": 1762
      },
      "extra": {
        "fingerprint": "9dcdaec79c1b42d517591efedc8796c6",
        "is_ignored": false,
        "lines": "    if ok:\n        response = HttpResponseRedirect(next) if next else HttpResponse(status=204)\n    else:\n        response = HttpResponseRedirect(\"index\")\n    return response",
        "message": "This rule will time out",
        "metadata": {},
        "metavars": {
          "$A": {
            "abstract_content": "ok",
            "end": {
              "col": 10,
              "line": 73,
              "offset": 1598
            },
            "start": {
              "col": 8,
              "line": 73,
              "offset": 1596
            },
            "unique_id": {
              "sid": 23,
              "type": "id"
            }
          },
          "$B": {
            "abstract_content": "response",
            "end": {
              "col": 20,
              "line": 77,
              "offset": 1762
            },
            "start": {
              "col": 12,
              "line": 77,
              "offset": 1754
            },
            "unique_id": {
              "sid": 24,
              "type": "id"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/equivalence/open_redirect.py",
      "start": {
        "col": 5,
        "line": 73,
        "offset": 1593
      }
    }
  ]
}